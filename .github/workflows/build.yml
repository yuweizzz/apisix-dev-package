name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PREFIX: ${{ vars.PREFIX }}
  # openresty
  OPENRESTY_VERSION: 1.27.1.1
  OPENRESTY_PREFIX: ${{ vars.PREFIX }}/openresty
  OPENRESTY_CC_OPT: -O2 -DNGX_LUA_ABORT_AT_PANIC -I${{ vars.PREFIX }}/zlib/include -I${{ vars.PREFIX }}/pcre2/include -I${{ vars.PREFIX }}/openssl3/include
  OPENRESTY_LD_OPT: -Wl,-rpath,${{ vars.PREFIX }}/luajit/lib:${{ vars.PREFIX }}/zlib/lib:${{ vars.PREFIX }}/pcre2/lib:${{ vars.PREFIX }}/openssl3/lib -L${{ vars.PREFIX }}/zlib/lib -L${{ vars.PREFIX }}/pcre2/lib -L${{ vars.PREFIX }}/openssl3/lib
  OPENRESTY_LUAJIT_XCFLAGS: '-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT'
  # lua module
  LUA_RESTY_EVENTS_MODULE_VERSION: 0.3.1
  NGX_MULTI_UPSTREAM_MODULE_VERSION: 1.3.1
  APISIX_NGINX_MODULE_VERSION: 1.18.0
  LUA_VAR_NGINX_MODULE_VERSION: v0.5.3
  LUA_RESTY_LIMIT_TRAFFIC_VERSION: v1.0.0
  # luarocks
  LUAROCKS_PREFIX: ${{ vars.PREFIX }}/luarocks
  LUAROCKS_VERSION: 3.11.1
  # apisix
  APISIX_VERSION: master

jobs:
  build:
    # glibc: 2.31
    runs-on: ubuntu-20.04
    name: build
    steps:
      - name: Change directory owner
        run: |
          sudo chown $(id -u):$(id -g) /usr/local/
      - name: Restore openresty cache
        id: restore-openresty
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ vars.PREFIX }}
          key: ${{ runner.os }}-openresty-cache
      - name: Set up apt repository for openresty
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        run: |
          sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates lsb-release
          wget -O - https://openresty.org/package/pubkey.gpg | sudo gpg --dearmor -o /usr/share/keyrings/openresty.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/openresty.gpg] http://openresty.org/package/ubuntu $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/openresty.list > /dev/null
          sudo apt-get update
      - name: Install openresty lib package and dev package
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        run: |
          sudo apt-get -y install openresty-openssl3 openresty-openssl3-dev \
            openresty-pcre2 openresty-pcre2-dev \
            openresty-zlib openresty-zlib-dev \
            openresty-pcre openresty-pcre-dev \
            libyaml-0-2 libyaml-dev
          sudo mkdir -p $PREFIX
          sudo chown $(id -u):$(id -g) $PREFIX
          sudo cp -r /usr/local/openresty/zlib $PREFIX
          sudo cp -r /usr/local/openresty/pcre $PREFIX
          sudo cp -r /usr/local/openresty/pcre2 $PREFIX
          sudo cp -r /usr/local/openresty/openssl3 $PREFIX
          mkdir -p $PREFIX/libyaml
          mkdir -p $PREFIX/libyaml/lib
          mkdir -p $PREFIX/libyaml/include
          sudo chown $(id -u):$(id -g) $PREFIX/libyaml
          sudo cp /usr/lib/x86_64-linux-gnu/libyaml* $PREFIX/libyaml/lib
          sudo cp /usr/include/yaml* $PREFIX/libyaml/include
      - name: Download lua module
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        run: |
          sudo chown $(id -u):$(id -g) /usr/local/src/
          cd /usr/local/src/
          git clone --depth=1 -b ${LUA_RESTY_EVENTS_MODULE_VERSION} https://github.com/Kong/lua-resty-events.git lua-resty-events-${LUA_RESTY_EVENTS_MODULE_VERSION}
          git clone --depth=1 -b ${NGX_MULTI_UPSTREAM_MODULE_VERSION} https://github.com/api7/ngx_multi_upstream_module.git ngx_multi_upstream_module-${NGX_MULTI_UPSTREAM_MODULE_VERSION}
          git clone --depth=1 -b ${APISIX_NGINX_MODULE_VERSION} https://github.com/api7/apisix-nginx-module.git apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION}
          git clone --depth=1 -b ${LUA_VAR_NGINX_MODULE_VERSION} https://github.com/api7/lua-var-nginx-module lua-var-nginx-module-${LUA_VAR_NGINX_MODULE_VERSION}
          git clone --depth=1 -b ${LUA_RESTY_LIMIT_TRAFFIC_VERSION} https://github.com/api7/lua-resty-limit-traffic lua-resty-limit-traffic-${LUA_RESTY_LIMIT_TRAFFIC_VERSION}
      - name: Download openresty source and build
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        run: |
          wget --no-check-certificate https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz
          tar -zxvpf openresty-$OPENRESTY_VERSION.tar.gz -C /usr/local/src/ > /dev/null
          cd /usr/local/src/ngx_multi_upstream_module-${NGX_MULTI_UPSTREAM_MODULE_VERSION}
          ./patch.sh /usr/local/src/openresty-${OPENRESTY_VERSION}
          cd /usr/local/src/apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION}/patch
          ./patch.sh /usr/local/src/openresty-${OPENRESTY_VERSION}
          cp -r /usr/local/src/lua-resty-limit-traffic-${LUA_RESTY_LIMIT_TRAFFIC_VERSION} /usr/local/src/openresty-${OPENRESTY_VERSION}/bundle/lua-resty-limit-traffic-${LUA_RESTY_LIMIT_TRAFFIC_VERSION}
          cd /usr/local/src/openresty-$OPENRESTY_VERSION || exit 1
          ./configure \
            --prefix="$OPENRESTY_PREFIX" \
            --with-cc-opt="$OPENRESTY_CC_OPT" \
            --with-ld-opt="$OPENRESTY_LD_OPT" \
            --with-luajit-xcflags="$OPENRESTY_LUAJIT_XCFLAGS" \
            --add-module=../apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION} \
            --add-module=../apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION}/src/stream \
            --add-module=../apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION}/src/meta \
            --add-module=../ngx_multi_upstream_module-${NGX_MULTI_UPSTREAM_MODULE_VERSION} \
            --add-module=../lua-var-nginx-module-$LUA_VAR_NGINX_MODULE_VERSION \
            --add-module=../lua-resty-events-$LUA_RESTY_EVENTS_MODULE_VERSION \
            --with-poll_module \
            --with-pcre-jit \
            --without-http_rds_json_module \
            --without-http_rds_csv_module \
            --without-lua_rds_parser \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-http_v2_module \
            --with-http_v3_module \
            --without-mail_pop3_module \
            --without-mail_imap_module \
            --without-mail_smtp_module \
            --with-http_stub_status_module \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_auth_request_module \
            --with-http_secure_link_module \
            --with-http_random_index_module \
            --with-http_gzip_static_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_slice_module \
            --with-http_gunzip_module \
            --with-threads \
            --with-compat \
            -j`nproc`
          make -j`nproc`
          make install
          cp -r /usr/local/src/lua-resty-events-${LUA_RESTY_EVENTS_MODULE_VERSION}/lualib/resty/events $OPENRESTY_PREFIX/lualib/resty/
          cp -r /usr/local/src/apisix-nginx-module-${APISIX_NGINX_MODULE_VERSION}/lib/resty/apisix $OPENRESTY_PREFIX/lualib/resty/
      - name: Build from luarocks source and install
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/luarocks/luarocks/archive/refs/tags/v$LUAROCKS_VERSION.tar.gz
          mkdir /usr/local/src/luarocks
          tar -zxvpf v$LUAROCKS_VERSION.tar.gz -C /usr/local/src/luarocks > /dev/null
          cd /usr/local/src/luarocks/luarocks-$LUAROCKS_VERSION
          ./configure --prefix=$LUAROCKS_PREFIX --with-lua=$OPENRESTY_PREFIX/luajit/
          make
          make install
          $LUAROCKS_PREFIX/bin/luarocks config variables.OPENSSL_LIBDIR $PREFIX/openssl3/lib
          $LUAROCKS_PREFIX/bin/luarocks config variables.OPENSSL_INCDIR $PREFIX/openssl3/include
          $LUAROCKS_PREFIX/bin/luarocks config variables.PCRE_LIBDIR $PREFIX/pcre/lib/
          $LUAROCKS_PREFIX/bin/luarocks config variables.PCRE_INCDIR $PREFIX/pcre/include/
          $LUAROCKS_PREFIX/bin/luarocks config variables.YAML_LIBDIR $PREFIX/libyaml/lib/
          $LUAROCKS_PREFIX/bin/luarocks config variables.YAML_INCDIR $PREFIX/libyaml/include/
      - name: Save Openresty Cache
        id: save-openresty
        uses: actions/cache/save@v4
        if: steps.restore-openresty.outputs.cache-hit != 'true'
        with:
          path: |
            ${{ vars.PREFIX }}
          key: ${{ runner.os }}-openresty-cache
      - name: Checkout patch
        uses: actions/checkout@v4
      - name: Download apisix and install
        run: |
          PATCH_FILE=$(realpath apisix-dev-package.patch)
          cd $PREFIX
          git clone --depth=1 -b ${APISIX_VERSION} https://github.com/apache/apisix.git apisix-${APISIX_VERSION}
          cd apisix-${APISIX_VERSION}
          patch -p1 < $PATCH_FILE
      - name: Restore apisix deps
        id: restore-apisix-deps
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ vars.PREFIX }}/apisix-${{ vars.APISIX_VERSION }}/deps
          key: ${{ runner.os }}-apisix-deps-cache
      - name: Download apisix deps
        if: steps.estore-apisix-deps.outputs.cache-hit != 'true'
        run: |
          cd $PREFIX/apisix-${APISIX_VERSION}
          $LUAROCKS_PREFIX/bin/luarocks install apisix-master-0.rockspec --tree deps --only-deps
      - name: Save apisix deps
        id: save-apisix-deps
        uses: actions/cache/save@v4
        if: steps.restore-apisix-deps.outputs.cache-hit != 'true'
        with:
          path: |
            ${{ vars.PREFIX }}/apisix-${{ vars.APISIX_VERSION }}/deps
          key: ${{ runner.os }}-apisix-deps-cache
      - name: Build deb package
        run: |
          mkdir -p pkg/usr/local
          mkdir -p pkg/DEBIAN
          sudo chown -R $(id -u):$(id -g) pkg
          cp -r $PREFIX pkg/usr/local
          cat << EOF > pkg/DEBIAN/control
          Package: apisix-dev
          Version: ${{ github.ref_name }}
          Maintainer: yuweizzz
          Architecture: amd64
          Description: APISIX development environment package
          EOF
          dpkg-deb -Z xz --build pkg apisix-dev_${{ github.ref_name }}_amd64.deb
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ github.ref_name }}-${{ runner.os }}-amd64
          path: ./*.deb

  test:
    needs: [build]
    runs-on: ubuntu-latest
    name: test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
      - name: Install deb package
        run: |
          sudo dpkg -i artifact-${{ github.ref_name }}-${{ runner.os }}-amd64/apisix-dev_${{ github.ref_name }}_amd64.deb
      - name: Install packages
        run: |
          sudo apt install cpanminus etcd-server etcd-client
          sudo systemctl start etcd
      - name: Install test-nginx and run test
        run: |
          cd $PREFIX/apisix-${APISIX_VERSION}
          sudo cpanm --notest Test::Nginx IPC::Run > build.log 2>&1 || (cat build.log && exit 1)
          git submodule update --init --recursive t/toolkit/
          git clone https://github.com/openresty/test-nginx.git
          export PATH=$PREFIX/openresty/bin:$PATH
          export PERL5LIB=.:$PERL5LIB
          export TEST_NGINX_BINARY=$PREFIX/openresty/nginx/sbin/nginx
          $PREFIX/apisix-${APISIX_VERSION}/bin/apisix init
          $PREFIX/apisix-${APISIX_VERSION}/bin/apisix init_etcd
          prove -Itest-nginx/lib -r t/core/*.t

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          files: artifact-${{ github.ref_name }}-${{ runner.os }}-amd64/*.deb
          generate_release_notes: true
